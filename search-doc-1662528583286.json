[{"title":"BridgeCommunication","type":0,"sectionRef":"#","url":"api/BridgeCommunication","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"BridgeCommunication","url":"api/BridgeCommunication#types","content":" "},{"title":"I_ConnectionStatus​","type":1,"pageTitle":"BridgeCommunication","url":"api/BridgeCommunication#I_ConnectionStatus","content":"&lt;/&gt; interface I_ConnectionStatus { TIMEOUT: &quot;TIMEOUT&quot;, ESTABLISHED: &quot;ESTABLISHED&quot;, QUEUED: &quot;QUEUED&quot; }   "},{"title":"T_ConnectionStatus​","type":1,"pageTitle":"BridgeCommunication","url":"api/BridgeCommunication#T_ConnectionStatus","content":"&lt;/&gt; type T_ConnectionStatus = &quot;TIMEOUT&quot; | &quot;ESTABLISHED&quot; | &quot;QUEUED&quot; The ConnectionStatus is returned from BridgeCommunication.EstablishConnection "},{"title":"Properties​","type":1,"pageTitle":"BridgeCommunication","url":"api/BridgeCommunication#properties","content":" "},{"title":"ClassName​","type":1,"pageTitle":"BridgeCommunication","url":"api/BridgeCommunication#ClassName","content":"&lt;/&gt; BridgeCommunication.ClassName: &quot;BridgeCommunication&quot; The class name of this class.  "},{"title":"ConnectionStatus​","type":1,"pageTitle":"BridgeCommunication","url":"api/BridgeCommunication#ConnectionStatus","content":"&lt;/&gt; BridgeCommunication.ConnectionStatus: I_ConnectionStatus This is a enum table used for the ConnectionStatus of BridgeCommunication.T_ConnectionStatus  "},{"title":"Name​","type":1,"pageTitle":"BridgeCommunication","url":"api/BridgeCommunication#Name","content":"&lt;/&gt; BridgeCommunication.Name: string The name of the BridgeCommunication object. "},{"title":"Functions​","type":1,"pageTitle":"BridgeCommunication","url":"api/BridgeCommunication#functions","content":" "},{"title":"Init​","type":1,"pageTitle":"BridgeCommunication","url":"api/BridgeCommunication#Init","content":"&lt;/&gt; BridgeCommunication.Init() → Schema_BridgeCommunication This method is for initializing the BridgeCommunication Module this function must be called on both the server &amp; client. This returns the BridgeCommunication class allowing to call Init on the same line hile retaining the class required. local BridgeCommunication = require(BridgeCommunicationModule).Init(); -- BridgeCommunication is the class BridgeCommunication.new(&quot;Test&quot;);   "},{"title":"WaitForBridgeComm​","type":1,"pageTitle":"BridgeCommunication","url":"api/BridgeCommunication#WaitForBridgeComm","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; BridgeCommunication.WaitForBridgeComm( bridgeName: string,-- Name of the BridgeCommunication timeOut: number?-- The time out in seconds or nil for no time out. ) → BridgeComm? This function waits for a BridgeCommunication by it's name to exists or will time out if timeOut is specified then returns nil.  "},{"title":"EstablishConnection​","type":1,"pageTitle":"BridgeCommunication","url":"api/BridgeCommunication#EstablishConnection","content":"This item only works when running on the server. Server &lt;/&gt; BridgeCommunication.EstablishConnection( remote: RemoteEvent , player: Player , timeOut: number? ) → T_ConnectionStatus This method takes a remote and a player and returns a ConnectionStatus (BridgeCommunication.T_ConnectionStatus) this is only meant to be used for internal remotes.  "},{"title":"new​","type":1,"pageTitle":"BridgeCommunication","url":"api/BridgeCommunication#new","content":"&lt;/&gt; BridgeCommunication.new( name: string-- The unique name that will be used to identify this BridgeCommunication ) → BridgeComm This methods creates a new BridgeCommunication object replicating it to the client.  "},{"title":"SetCommBridge​","type":1,"pageTitle":"BridgeCommunication","url":"api/BridgeCommunication#SetCommBridge","content":"&lt;/&gt; BridgeCommunication:SetCommBridge( self: BridgeComm, bridgeKey: string,-- The bridgeKey that will be fired to bridgeFn: ( player: Player , ...any ) → ()-- The function that will be called when fired ) → () This method sets a function to a bridgeKey that when fired will call the function.  "},{"title":"FireServer​","type":1,"pageTitle":"BridgeCommunication","url":"api/BridgeCommunication#FireServer","content":"This item only works when running on the client. Client &lt;/&gt; BridgeCommunication:FireServer( self: BridgeComm, bridgeKey: string,-- The bridgeKey that will be fired to ...: any-- The tuple of arguments to fire ) → () This method fires the server with a bridgeKey calling any CommBridge function on the server.  "},{"title":"FireClient​","type":1,"pageTitle":"BridgeCommunication","url":"api/BridgeCommunication#FireClient","content":"This item only works when running on the server. Server &lt;/&gt; BridgeCommunication:FireClient( self: BridgeComm, player: Player ,-- The client to fire the remote to bridgeKey: string,-- The bridgeKey that will be fired to ...: any-- The tuple of arguments to fire ) → () This method fires the client with a bridgeKey calling any CommBridge function on the server.  "},{"title":"Destroy​","type":1,"pageTitle":"BridgeCommunication","url":"api/BridgeCommunication#Destroy","content":"&lt;/&gt; BridgeCommunication:Destroy( self: BridgeComm-- The BridgeComm that will be destroyed ) → () This methods destroys the BridgeComm object also relaying the destruction to the client. "}]